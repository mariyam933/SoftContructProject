
import java.awt.Image;
import java.util.ArrayList;

import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * The CartFrame class represents the graphical user interface for displaying and managing the shopping cart.
 * It extends JFrame and provides methods to interact with the cart, such as increasing quantity, deleting items,
 * and checking out.
 */

public class CartFrame extends javax.swing.JFrame {

     /** The list of products available in the system. */
    ArrayList<Product> pr;

    /** The customer associated with the cart. */
    customer cs = null;

    /**
     * Creates a new instance of CartFrame.
     *
     * @param cs The customer associated with the cart.
     * @param pr The list of products available in the system.
     */
    public CartFrame(customer cs, ArrayList<Product> pr) {
        this.pr = pr;
        this.cs = cs;
        initComponents();
        ImageIcon background_img = new ImageIcon(
                "C:\\Users\\DELL\\Desktop\\Grocery_Management_System_Java\\SMMS_Images\\cart.png", "");
        Image img = background_img.getImage();
        Image temp_img = img.getScaledInstance(800, 620, Image.SCALE_SMOOTH);
        background_img = new ImageIcon(temp_img);
        JLabel backgrnd = new JLabel("", background_img, JLabel.CENTER);
        backgrnd.setBounds(0, 0, 800, 620);
        this.add(backgrnd);
        this.setTitle("Cart");
        this.setResizable(false);
        checkoutBtn.setOpaque(true);
        deleteBtn.setOpaque(true);
        backBtn.setOpaque(true);
        increaseQtyBtn.setOpaque(true);
        this.setLocationRelativeTo(null);

        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        String[] col = { "ID", "Name", "Quantity", "Price" };
        ArrayList<order> orders = cs.getOrders();
        DefaultTableModel tableModel = new DefaultTableModel(null, col);
        productsTable.setModel(tableModel);
        productsTable.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);
        TableColumnModel colModel = productsTable.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(30);
        colModel.getColumn(1).setPreferredWidth(450);
        colModel.getColumn(2).setPreferredWidth(30);
        colModel.getColumn(3).setPreferredWidth(80);
        DefaultCellEditor editor = (DefaultCellEditor) productsTable.getDefaultEditor(Object.class);
        editor.setClickCountToStart(20);
        productsTable.setRowSelectionAllowed(true);
        for (int i = 0; i < orders.size(); i++) {

            if (orders.get(i).getType().equals("curr")) {
                int ID = orders.get(i).getID();
                int qty = orders.get(i).getQuantity();
                double price = orders.get(i).getTotalPrice();
                String data[] = { String.valueOf(ID), orders.get(i).getName(), String.valueOf(qty),
                        String.valueOf(price) };
                tableModel.addRow(data);

            }

        }
    }

    /**
     * Initializes the graphical user interface components. This method is auto-generated by the NetBeans Form Editor.
     * It sets up the layout, buttons, and table for displaying cart items.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        checkoutBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        increaseQtyBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        productsTable.setBackground(new java.awt.Color(204, 204, 204));
        productsTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        productsTable.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        productsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "ID", "Name", "Quantity", "Price"
                }) {
            boolean[] canEdit = new boolean[] {
                    false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(productsTable);
        if (productsTable.getColumnModel().getColumnCount() > 0) {
            productsTable.getColumnModel().getColumn(0).setResizable(false);
            productsTable.getColumnModel().getColumn(1).setResizable(false);
            productsTable.getColumnModel().getColumn(2).setResizable(false);
            productsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        checkoutBtn.setBackground(new java.awt.Color(255, 102, 102));
        checkoutBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        checkoutBtn.setText("Check Out");
        checkoutBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        checkoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 102, 102));
        deleteBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        deleteBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(255, 102, 102));
        backBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        backBtn.setText("Back");
        backBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        backBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        increaseQtyBtn.setBackground(new java.awt.Color(255, 102, 102));
        increaseQtyBtn.setFont(new java.awt.Font("Hoefler Text", 1, 26)); // NOI18N
        increaseQtyBtn.setText("Increase Qty");
        increaseQtyBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 2, true));
        increaseQtyBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        increaseQtyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseQtyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(77, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(increaseQtyBtn, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(100, 100, 100)
                                                .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 168,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(43, 43, 43))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(74, 74, 74))))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(39, 39, 39)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        301, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(checkoutBtn,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 43,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(increaseQtyBtn,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 43,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(41, 41, 41)))
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler for the "Back" button. Closes the current cart window.
     *
     * @param evt The ActionEvent triggered by the button.
     */
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_backBtnActionPerformed
        this.setVisible(false);
    }// GEN-LAST:event_backBtnActionPerformed

    /**
     * Event handler for the "Increase Quantity" button. Increases the quantity of the selected product in the cart.
     *
     * @param evt The ActionEvent triggered by the button.
     */
    private void increaseQtyBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_increaseQtyBtnActionPerformed
        // TODO add your handling code here:
        int row = productsTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please Select a Product to increase its Quantity!", "ALERT",
                    JOptionPane.INFORMATION_MESSAGE);

        } else {
            String val = productsTable.getModel().getValueAt(row, 0).toString();
            int ID = Integer.parseInt(val);
            ArrayList<order> or;
            or = cs.getOrders();
            for (int i = 0; i < or.size(); i++) {
                if (ID == or.get(i).getID() && or.get(i).getType().equals("curr")) {
                    int qty = or.get(i).getQuantity();

                    for (int j = 0; j < pr.size(); j++) {
                        if (ID == pr.get(j).getID()) {
                            double price = pr.get(j).getPrice();
                            if ((qty + 1) <= pr.get(j).getQuantity()) {
                                qty += 1;
                                price = price * qty;
                                order neworder = new order(or.get(i).getID(), or.get(i).getName(), qty, price, "curr");
                                or.remove(or.get(i));
                                or.add(neworder);
                                CartFrame main = new CartFrame(cs, pr);
                                main.setVisible(true);
                                this.dispose();
                                break;
                            } else {
                                JOptionPane.showMessageDialog(this, "Product is OUT OF STOCK!", "ALERT",
                                        JOptionPane.INFORMATION_MESSAGE);
                                CartFrame main = new CartFrame(cs, pr);
                                main.setVisible(true);
                                this.dispose();
                                break;

                            }
                        }

                    }
                    break;
                }

            }

        }
    }// GEN-LAST:event_increaseQtyBtnActionPerformed

    /**
     * Event handler for the "Check Out" button. Closes the current cart window and opens the receipt window.
     *
     * @param evt The ActionEvent triggered by the button.
     */
    private void checkoutBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_checkoutBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        RecieptFrame rf = new RecieptFrame(cs);
        rf.setVisible(true);
    }// GEN-LAST:event_checkoutBtnActionPerformed

    /**
     * Event handler for the "Delete" button. Deletes the selected product from the cart.
     *
     * @param evt The ActionEvent triggered by the button.
     */
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int row = productsTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please Select a Product to show Delete Product!", "ALERT",
                    JOptionPane.INFORMATION_MESSAGE);

        } else {
            String val = productsTable.getModel().getValueAt(row, 0).toString();
            int i = Integer.parseInt(val);
            ArrayList<order> or;
            or = cs.getOrders();
            for (int j = 0; j < or.size(); j++) {
                if (or.get(j).getID() == i && or.get(j).getType().equals("curr")) {
                    or.remove(or.get(j));
                    cs.setOrders(or);
                    break;

                }
            }

            boolean flag = false;
            ArrayList<order> ors = cs.getOrders();
            for (int j = 0; j < ors.size(); j++) {
                if (ors.get(j).getType().equals("curr")) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                JOptionPane.showMessageDialog(this, "Your Cart is Empty!", "ALERT", JOptionPane.INFORMATION_MESSAGE);
                this.setVisible(false);

            } else {
                CartFrame obj1 = new CartFrame(cs, pr);
                obj1.setVisible(true);
            }

        }
    }// GEN-LAST:event_deleteBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton checkoutBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton increaseQtyBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productsTable;
    // End of variables declaration//GEN-END:variables
}
